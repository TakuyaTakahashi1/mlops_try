name: "A12: scheduled comments & PR"

on:
  schedule:
    - cron: "40 22 * * *"  # JST 07:40（UTC）
  workflow_dispatch: {}

permissions:
  contents: write
  pull-requests: write

concurrency:
  group: a12-comments
  cancel-in-progress: false

jobs:
  scrape-and-pr:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with: { python-version: "3.11" }
      - name: Install deps
        run: |
          python -m pip install -U pip wheel setuptools
          pip install -r requirements.txt
      - name: Run comments scraper
        id: run_scraper
        run: |
          python - <<'PY'
          from automation.comments_core import fetch_latest_comments, write_csvs
          import pathlib
          targets = pathlib.Path("automation/comment_targets.txt").read_text(encoding="utf-8").splitlines()
          urls = [u.strip() for u in targets if u.strip() and not u.strip().startswith("#")]
          all_rows = []
          for u in urls:
            all_rows += fetch_latest_comments(u, take=5)
          write_csvs(all_rows, outdir="data")
          print(f"daily_rows={len(all_rows)}")
          PY
          echo "collected=$(awk 'NR>1{c++} END{print c+0}' data/comments-*.csv)" >> $GITHUB_OUTPUT
          echo "log<<EOF" >> $GITHUB_OUTPUT
          echo "daily file:"; ls -1 data/comments-*.csv | tail -n 1
          echo "--- head ---"; head -n 10 data/comments-*.csv | tail -n 10
          echo "EOF" >> $GITHUB_OUTPUT
      - name: Prepare meta (UTC)

      - name: Keyword scan (A13)
        id: scan_kw
        run: |
          set -euo pipefail
          CSV="data/comments-${{ env.UTC_YMD }}.csv"
          echo "csv=$CSV"
          mkdir -p tmp
          HITS_FILE="tmp/keyword_hits.txt"
          : > "$HITS_FILE"
          if [ -s automation/keywords.txt ] && [ -s "$CSV" ]; then
            # 5列目(content)だけを見るのではなく、CSV全体に対して単純一致(F)・大文字小文字無視(i)で走査
            # 行全体を出しておく（後でPR本文に入れる）
            grep -iF -f automation/keywords.txt "$CSV" || true | tee "$HITS_FILE" >/dev/null
          fi
          HITS_COUNT=$(wc -l < "$HITS_FILE" || echo 0)
          echo "hits_count=$HITS_COUNT" >> "$GITHUB_OUTPUT"
          # 本文用に整形（先頭10件まで）
          echo "----- keyword hits (up to 10) -----" > tmp/kw_body.txt
          head -n 10 "$HITS_FILE" >> tmp/kw_body.txt || true
          echo "" >> tmp/kw_body.txt
          echo "(full: see artifact or download tmp/keyword_hits.txt)" >> tmp/kw_body.txt

      - name: Upload keyword hits artifact (A13)
        if: ${{ steps.scan_kw.outputs.hits_count != '0' }}
        uses: actions/upload-artifact@v4
        with:
          name: keyword-hits-${{ env.UTC_YMD }}
          path: tmp/keyword_hits.txt
        run: |
          echo "UTC_DATE=$(date -u +%Y-%m-%d)" >> $GITHUB_ENV
          echo "UTC_YMD=$(date -u +%Y%m%d)" >> $GITHUB_ENV
          echo "UTC_TS=$(date -u +'%Y-%m-%d %H:%M:%S')" >> $GITHUB_ENV
          echo "DAILY_BRANCH=auto/a12/comments-$(date -u +%Y%m%d)" >> $GITHUB_ENV
      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v6
        with:
          commit-message: "A12: comments scrape ${{ env.UTC_DATE }} (UTC)"
          title: "A12: comments scrape ${{ env.UTC_DATE }}"
          body: |
            Automated run at (UTC): ${{ env.UTC_TS }}
            **collected = ${{ steps.run_scraper.outputs.collected }}**
            - Includes: data/comments-${{ env.UTC_YMD }}.csv
            <details><summary>log</summary>

            ${{ steps.run_scraper.outputs.log }}

            </details>
          branch: auto/a12/comments
          delete-branch: true
          labels: |
            automation
            A12
            ${{ steps.scan_kw.outputs.hits_count != '0' && 'keyword-hit' || '' }}
